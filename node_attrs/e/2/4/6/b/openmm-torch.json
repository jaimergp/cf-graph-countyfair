{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "azure": {
   "free_disk_space": true,
   "store_build_artifacts": true
  },
  "build_platform": {
   "linux_aarch64": "linux_64",
   "osx_arm64": "osx_64"
  },
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  },
  "test": "native_and_emulated"
 },
 "feedstock_name": "openmm-torch",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
   "dev_url": "https://github.com/openmm/openmm-torch",
   "doc_url": "https://github.com/openmm/openmm-torch",
   "home": "https://github.com/openmm/openmm-torch",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "README.md",
   "summary": "OpenMM plugin to define forces with neural networks"
  },
  "build": {
   "number": "4",
   "rpaths": [
    "lib/",
    "SP_DIR/torch/lib"
   ],
   "string": "cuda120py39h1234567_4"
  },
  "extra": {
   "recipe-maintainers": [
    "raimis",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "RaulPPelaez"
   ]
  },
  "package": {
   "name": "openmm-torch",
   "version": "1.4"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cuda-version ==11.2",
    "cmake",
    "make",
    "cuda-version ==11.8",
    "cuda-version ==12.0"
   ],
   "host": [
    "python",
    "pip",
    "swig",
    "openmm >=8.0.0",
    "ocl-icd",
    "pytorch",
    "pytorch =*=cuda*",
    "cuda-version ==11.2",
    "cuda-version ==11.8",
    "pytorch =*=cpu*",
    "cuda-version ==12.0"
   ],
   "run": [
    "python",
    "openmm",
    "ocl-icd",
    "ocl-icd-system"
   ],
   "run_constrained": [
    "pytorch =*=cuda*",
    "pytorch =*=cpu*"
   ]
  },
  "source": {
   "patches": [
    "0001-Fix-paths.patch",
    "0002-Cpp17.patch"
   ],
   "sha256": "c8270d08ae13a0af7050997964447236d6c93eb611b89e1de9c4ca3b3a4aaab5",
   "url": "https://github.com/openmm/openmm-torch/archive/v1.4.tar.gz"
  },
  "test": {
   "commands": "cd ${CONDA_PREFIX}/share/openmm-torch/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
   "imports": [
    "openmmtorch"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cuda-version",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cuda-version",
    "ocl-icd",
    "openmm",
    "pip",
    "python",
    "pytorch",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "ocl-icd",
    "ocl-icd-system",
    "openmm",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
   "dev_url": "https://github.com/openmm/openmm-torch",
   "doc_url": "https://github.com/openmm/openmm-torch",
   "home": "https://github.com/openmm/openmm-torch",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "README.md",
   "summary": "OpenMM plugin to define forces with neural networks"
  },
  "build": {
   "number": "4",
   "rpaths": [
    "lib/",
    "SP_DIR/torch/lib"
   ],
   "string": "cpu_py39h1234567_4"
  },
  "extra": {
   "recipe-maintainers": [
    "raimis",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "RaulPPelaez"
   ]
  },
  "package": {
   "name": "openmm-torch",
   "version": "1.4"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make"
   ],
   "host": [
    "python",
    "pip",
    "swig",
    "openmm >=8.0.0",
    "ocl-icd",
    "pytorch",
    "pytorch =*=cpu*"
   ],
   "run": [
    "python",
    "openmm",
    "ocl-icd",
    "ocl-icd-system"
   ],
   "run_constrained": [
    "pytorch =*=cpu*"
   ]
  },
  "source": {
   "patches": [
    "0001-Fix-paths.patch",
    "0002-Cpp17.patch"
   ],
   "sha256": "c8270d08ae13a0af7050997964447236d6c93eb611b89e1de9c4ca3b3a4aaab5",
   "url": "https://github.com/openmm/openmm-torch/archive/v1.4.tar.gz"
  },
  "test": {
   "commands": "cd ${CONDA_PREFIX}/share/openmm-torch/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
   "imports": [
    "openmmtorch"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "ocl-icd",
    "openmm",
    "pip",
    "python",
    "pytorch",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "ocl-icd",
    "ocl-icd-system",
    "openmm",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
   "dev_url": "https://github.com/openmm/openmm-torch",
   "doc_url": "https://github.com/openmm/openmm-torch",
   "home": "https://github.com/openmm/openmm-torch",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "README.md",
   "summary": "OpenMM plugin to define forces with neural networks"
  },
  "build": {
   "number": "4",
   "rpaths": [
    "lib/",
    "SP_DIR/torch/lib"
   ],
   "string": "cpu_py39h1234567_4"
  },
  "extra": {
   "recipe-maintainers": [
    "raimis",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "RaulPPelaez"
   ]
  },
  "package": {
   "name": "openmm-torch",
   "version": "1.4"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cuda-version ==11.2",
    "cmake",
    "make",
    "cuda-version ==11.8",
    "cuda-version ==12.0"
   ],
   "host": [
    "python",
    "pip",
    "swig",
    "openmm >=8.0.0",
    "ocl-icd",
    "pytorch",
    "pytorch =*=cuda*",
    "cuda-version ==11.2",
    "cuda-version ==11.8",
    "pytorch =*=cpu*",
    "cuda-version ==12.0",
    "khronos-opencl-icd-loader"
   ],
   "run": [
    "python",
    "openmm",
    "ocl-icd",
    "ocl-icd-system",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple"
   ],
   "run_constrained": [
    "pytorch =*=cuda*",
    "pytorch =*=cpu*"
   ]
  },
  "source": {
   "patches": [
    "0001-Fix-paths.patch",
    "0002-Cpp17.patch"
   ],
   "sha256": "c8270d08ae13a0af7050997964447236d6c93eb611b89e1de9c4ca3b3a4aaab5",
   "url": "https://github.com/openmm/openmm-torch/archive/v1.4.tar.gz"
  },
  "test": {
   "commands": "cd ${CONDA_PREFIX}/share/openmm-torch/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
   "imports": [
    "openmmtorch"
   ]
  }
 },
 "name": "openmm-torch",
 "osx_64_meta_yaml": {
  "about": {
   "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
   "dev_url": "https://github.com/openmm/openmm-torch",
   "doc_url": "https://github.com/openmm/openmm-torch",
   "home": "https://github.com/openmm/openmm-torch",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "README.md",
   "summary": "OpenMM plugin to define forces with neural networks"
  },
  "build": {
   "number": "4",
   "rpaths": [
    "lib/",
    "SP_DIR/torch/lib"
   ],
   "string": "cpu_py39h1234567_4"
  },
  "extra": {
   "recipe-maintainers": [
    "raimis",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "RaulPPelaez"
   ]
  },
  "package": {
   "name": "openmm-torch",
   "version": "1.4"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "python",
    "pip",
    "swig",
    "openmm >=8.0.0",
    "khronos-opencl-icd-loader",
    "pytorch",
    "pytorch =*=cpu*"
   ],
   "run": [
    "python",
    "openmm",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple"
   ],
   "run_constrained": [
    "pytorch =*=cpu*"
   ]
  },
  "source": {
   "patches": [
    "0001-Fix-paths.patch",
    "0002-Cpp17.patch"
   ],
   "sha256": "c8270d08ae13a0af7050997964447236d6c93eb611b89e1de9c4ca3b3a4aaab5",
   "url": "https://github.com/openmm/openmm-torch/archive/v1.4.tar.gz"
  },
  "test": {
   "commands": "cd ${CONDA_PREFIX}/share/openmm-torch/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
   "imports": [
    "openmmtorch"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "openmm",
    "pip",
    "python",
    "pytorch",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "openmm",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
   "dev_url": "https://github.com/openmm/openmm-torch",
   "doc_url": "https://github.com/openmm/openmm-torch",
   "home": "https://github.com/openmm/openmm-torch",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "README.md",
   "summary": "OpenMM plugin to define forces with neural networks"
  },
  "build": {
   "number": "4",
   "rpaths": [
    "lib/",
    "SP_DIR/torch/lib"
   ],
   "string": "cpu_py39h1234567_4"
  },
  "extra": {
   "recipe-maintainers": [
    "raimis",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "RaulPPelaez"
   ]
  },
  "package": {
   "name": "openmm-torch",
   "version": "1.4"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "python",
    "pip",
    "swig",
    "openmm >=8.0.0",
    "khronos-opencl-icd-loader",
    "pytorch",
    "pytorch =*=cpu*"
   ],
   "run": [
    "python",
    "openmm",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple"
   ],
   "run_constrained": [
    "pytorch =*=cpu*"
   ]
  },
  "source": {
   "patches": [
    "0001-Fix-paths.patch",
    "0002-Cpp17.patch"
   ],
   "sha256": "c8270d08ae13a0af7050997964447236d6c93eb611b89e1de9c4ca3b3a4aaab5",
   "url": "https://github.com/openmm/openmm-torch/archive/v1.4.tar.gz"
  },
  "test": {
   "commands": "cd ${CONDA_PREFIX}/share/openmm-torch/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
   "imports": [
    "openmmtorch"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "openmm",
    "pip",
    "python",
    "pytorch",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "openmm",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "openmm-torch"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "linux_aarch64",
  "osx_64",
  "osx_arm64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/openmm-torch.json"
 },
 "raw_meta_yaml": "{% set name = \"openmm-torch\" %}\n{% set version = \"1.4\" %}\n\n# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion\n{% set torch_proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n\n{% if cuda_compiler_version in (None, \"None\", True, False) %}\n{% set cuda_major = 0 %}\n{% else %}\n{% set cuda_major = environ.get(\"cuda_compiler_version\", \"11.8\").split(\".\")[0] | int %}\n{% endif %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/openmm/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: c8270d08ae13a0af7050997964447236d6c93eb611b89e1de9c4ca3b3a4aaab5\n  patches:\n    - 0001-Fix-paths.patch\n    - 0002-Cpp17.patch\nbuild:\n  number: 4\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == \"None\"]\n  skip: true  # [win]\n  skip: true  # [aarch64 and cuda_compiler_version not in (undefined, 'None')]\n  rpaths:\n    - lib/\n    - {{ SP_DIR }}/torch/lib\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy >=1.19                           # [build_platform != target_platform]\n    - swig                                   # [build_platform != target_platform]\n    - pytorch                                # [build_platform != target_platform]\n    - pytorch =*={{ torch_proc_type }}*      # [build_platform != target_platform]\n    - openmm >=8.0.0                         # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    {% if cuda_major >= 12 %}\n    - cuda-driver-dev\n    - cuda-nvrtc-dev\n    - libcufft-dev\n    {% endif %}\n    - cuda-version =={{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - cmake\n    - make\n  host:\n    - python\n    - pip\n    - swig\n    - openmm >=8.0.0\n    - ocl-icd  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n    # Leaving two dependencies helps rerender correctly\n    # The first gets filled in by the global pinnings\n    # The second gets the processor type\n    - pytorch\n    - pytorch =*={{ torch_proc_type }}*\n    - cuda-version =={{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')]\n    {% if cuda_major >= 12 %}\n    - cuda-driver-dev\n    - cuda-cudart-dev\n    - cuda-nvrtc-dev\n    - cuda-nvtx-dev\n    - cuda-nvml-dev\n    - libcublas-dev\n    - libcufft-dev \n    - libcurand-dev\n    {% endif %}\n  run:\n    - python\n    - {{ pin_compatible('openmm', max_pin='x.x') }}\n    - ocl-icd  # [linux]\n    - ocl-icd-system  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n    - ocl_icd_wrapper_apple      # [osx]\n  run_constrained:\n    # 2022/02/05 hmaarrfk\n    # While conda packaging seems to allow us to specify\n    # constraints on the same package in different lines\n    # the resulting package doesn't have the ability to\n    # be specified in multiples lines\n    # This makes it tricky to use run_exports\n    # we add the GPU constraint in the run_constrained\n    # to allow us to have \"two\" constraints on the\n    # running package\n    - pytorch =*={{ torch_proc_type }}*\n\ntest:\n  imports:\n    - openmmtorch\n  commands: |\n    cd ${CONDA_PREFIX}/share/{{ name }}/tests\n    ls -al\n    set +e\n    summary=\"\"\n    exitcode=0\n    for f in Test*; do\n      if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n        continue\n      fi\n      echo \"Running $f...\"\n      ./${f}\n      thisexitcode=$?\n      summary+=\"\\n${f}: \"\n      if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n      ((exitcode+=$thisexitcode))\n    done\n    echo \"-------\"\n    echo \"Summary\"\n    echo \"-------\"\n    echo -e \"${summary}\"\n    exit $exitcode\n\nabout:\n  home: https://github.com/openmm/openmm-torch\n  license: MIT\n  license_family: MIT\n  license_file: README.md\n  summary: OpenMM plugin to define forces with neural networks\n  description: |\n    This is a plugin for OpenMM that allows neural networks to be\n    used for defining forces. It is implemented with PyTorch.\n    To use it, you create a PyTorch model that takes particle\n    positions as input and produces energy as output. This plugin\n    uses the model to apply forces to particles during a simulation.\n  doc_url: https://github.com/openmm/openmm-torch\n  dev_url: https://github.com/openmm/openmm-torch\n\nextra:\n  recipe-maintainers:\n    - raimis\n    - jaimergp\n    - peastman\n    - mikemhenry\n    - RaulPPelaez\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cdt_stub",
   "cmake",
   "cuda-version",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "khronos-opencl-icd-loader",
   "make",
   "ocl-icd",
   "ocl-icd-system",
   "ocl_icd_wrapper_apple",
   "openmm",
   "pip",
   "python",
   "pytorch",
   "swig"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cuda-version",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cuda-version",
    "khronos-opencl-icd-loader",
    "ocl-icd",
    "openmm",
    "pip",
    "python",
    "pytorch",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "ocl-icd",
    "ocl-icd-system",
    "ocl_icd_wrapper_apple",
    "openmm",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cuda-version ==11.2",
    "cuda-version ==11.8",
    "cuda-version ==12.0",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cuda-version ==11.2",
    "cuda-version ==11.8",
    "cuda-version ==12.0",
    "khronos-opencl-icd-loader",
    "ocl-icd",
    "openmm >=8.0.0",
    "pip",
    "python",
    "pytorch",
    "pytorch =*=cpu*",
    "pytorch =*=cuda*",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "ocl-icd",
    "ocl-icd-system",
    "ocl_icd_wrapper_apple",
    "openmm",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/openmm/openmm-torch/archive/v1.4.tar.gz",
 "version": "1.4",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/openmm-torch.json"
 }
}
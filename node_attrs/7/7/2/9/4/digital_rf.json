{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "azure": {
   "store_build_artifacts": true
  },
  "bot": {
   "automerge": true
  },
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  },
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  },
  "test": "native_and_emulated"
 },
 "feedstock_name": "digital_rf",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "2",
   "run_exports": [
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "patches": [
    "0001-python-Replace-example-s-deprecated-use-of-np.comple.patch"
   ],
   "sha256": "62fd998abbdffcf406524d66a54385cede270349af695b0b0e9e24c0488ac5a0",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.8/digital_rf-2.6.8.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "2",
   "run_exports": [
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "patches": [
    "0001-python-Replace-example-s-deprecated-use-of-np.comple.patch"
   ],
   "sha256": "62fd998abbdffcf406524d66a54385cede270349af695b0b0e9e24c0488ac5a0",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.8/digital_rf-2.6.8.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "2",
   "run_exports": [
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "patches": [
    "0001-python-Replace-example-s-deprecated-use-of-np.comple.patch"
   ],
   "sha256": "62fd998abbdffcf406524d66a54385cede270349af695b0b0e9e24c0488ac5a0",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.8/digital_rf-2.6.8.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "2",
   "run_exports": [
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "patches": [
    "0001-python-Replace-example-s-deprecated-use-of-np.comple.patch"
   ],
   "sha256": "62fd998abbdffcf406524d66a54385cede270349af695b0b0e9e24c0488ac5a0",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.8/digital_rf-2.6.8.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "name": "digital_rf",
 "osx_64_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "2",
   "run_exports": [
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "patches": [
    "0001-python-Replace-example-s-deprecated-use-of-np.comple.patch"
   ],
   "sha256": "62fd998abbdffcf406524d66a54385cede270349af695b0b0e9e24c0488ac5a0",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.8/digital_rf-2.6.8.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "2",
   "run_exports": [
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "patches": [
    "0001-python-Replace-example-s-deprecated-use-of-np.comple.patch"
   ],
   "sha256": "62fd998abbdffcf406524d66a54385cede270349af695b0b0e9e24c0488ac5a0",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.8/digital_rf-2.6.8.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "digital_rf"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "linux_aarch64",
  "linux_ppc64le",
  "osx_64",
  "osx_arm64",
  "win_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/digital_rf.json"
 },
 "raw_meta_yaml": "{% set version = \"2.6.8\" %}\n\npackage:\n  name: digital_rf\n  version: {{ version }}\n\nsource:\n  url: https://github.com/MITHaystack/digital_rf/releases/download/{{ version }}/digital_rf-{{ version }}.tar.gz\n  sha256: 62fd998abbdffcf406524d66a54385cede270349af695b0b0e9e24c0488ac5a0\n  patches:\n    - 0001-python-Replace-example-s-deprecated-use-of-np.comple.patch\n\nbuild:\n  number: 2\n  # there are dependency conflicts for Python 2 on Windows\n  skip: true  # [win and py2k]\n  run_exports:\n    - {{ pin_subpackage('digital_rf') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - cmake >=3.15\n    - make  # [not win]\n    # cross-compilation dependencies\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n\n  host:\n    - hdf5\n    - mako\n    - numpy\n    - pkgconfig\n    - python\n    - setuptools\n\n  run:\n    - h5py\n    - hdf5\n    - {{ pin_compatible('numpy') }}\n    - packaging\n    - python\n    - python-dateutil\n    - pytz\n    - six\n    - watchdog\n\ntest:\n  requires:\n    - gnuradio-core\n    - pytest >=3.6\n  imports:\n    - digital_rf\n    - digital_rf.digital_rf_hdf5\n    - gr_digital_rf\n  source_files:\n    - python/tests/*.py\n    - python/examples/*.py\n  commands:\n    - pytest\n    - python python/examples/example_write_digital_metadata.py\n    - python python/examples/example_read_digital_metadata.py\n\nabout:\n  home: https://github.com/MITHaystack/digital_rf\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Work with data in the Digital RF and Digital Metadata formats.\n  description: |\n    The Digital RF project encompasses a standardized HDF5 format for reading\n    and writing of radio frequency data and the software for doing so. The\n    format is designed to be self-documenting for data archive and to allow\n    rapid random access for data processing. For details on the format, refer\n    to the documentation.\n\n    This suite of software includes libraries for reading and writing data in\n    the Digital RF HDF5 format in C (``libdigital_rf``), Python\n    (``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\n    MATLAB. It also contains the `thor` UHD radio recorder script, Python\n    tools for managing and processing Digital RF data, example scripts that\n    demonstrate basic usage, and example applications that encompass a\n    complete data recording and processing chain for various use cases.\n\n  doc_url: https://github.com/MITHaystack/digital_rf/tree/master/docs\n  dev_url: https://github.com/MITHaystack/digital_rf\n\nextra:\n  recipe-maintainers:\n    - ryanvolz\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cmake",
   "h5py",
   "hdf5",
   "make",
   "mako",
   "numpy",
   "packaging",
   "pkgconfig",
   "python",
   "python-dateutil",
   "pytz",
   "setuptools",
   "six",
   "watchdog"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest >=3.6"
   ]
  }
 },
 "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.8/digital_rf-2.6.8.tar.gz",
 "version": "2.6.8",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/digital_rf.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "2",
   "run_exports": [
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "patches": [
    "0001-python-Replace-example-s-deprecated-use-of-np.comple.patch"
   ],
   "sha256": "62fd998abbdffcf406524d66a54385cede270349af695b0b0e9e24c0488ac5a0",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.8/digital_rf-2.6.8.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 }
}
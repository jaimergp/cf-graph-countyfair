{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  },
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default",
   "win": "azure"
  },
  "test": "native_and_emulated"
 },
 "feedstock_name": "cymem",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "PYTHON -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python"
   ]
  },
  "source": {
   "sha256": "8fb09d222e21dcf1c7e907dc85cf74501d4cea6c4ed4ac6c9e016f98fb59cbbf",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem"
   ],
   "requires": [
    "pytest"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "PYTHON -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python"
   ]
  },
  "source": {
   "sha256": "8fb09d222e21dcf1c7e907dc85cf74501d4cea6c4ed4ac6c9e016f98fb59cbbf",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem"
   ],
   "requires": [
    "pytest"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "PYTHON -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python"
   ]
  },
  "source": {
   "sha256": "8fb09d222e21dcf1c7e907dc85cf74501d4cea6c4ed4ac6c9e016f98fb59cbbf",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem"
   ],
   "requires": [
    "pytest"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "PYTHON -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python"
   ]
  },
  "source": {
   "sha256": "8fb09d222e21dcf1c7e907dc85cf74501d4cea6c4ed4ac6c9e016f98fb59cbbf",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem"
   ],
   "requires": [
    "pytest"
   ]
  }
 },
 "name": "cymem",
 "osx_64_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "PYTHON -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python"
   ]
  },
  "source": {
   "sha256": "8fb09d222e21dcf1c7e907dc85cf74501d4cea6c4ed4ac6c9e016f98fb59cbbf",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem"
   ],
   "requires": [
    "pytest"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "PYTHON -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python"
   ]
  },
  "source": {
   "sha256": "8fb09d222e21dcf1c7e907dc85cf74501d4cea6c4ed4ac6c9e016f98fb59cbbf",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem"
   ],
   "requires": [
    "pytest"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cymem"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "linux_aarch64",
  "linux_ppc64le",
  "osx_64",
  "osx_arm64",
  "win_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/cymem.json"
 },
 "raw_meta_yaml": "{% set version = \"2.0.8\" %}\n{% set sha256sum = \"8fb09d222e21dcf1c7e907dc85cf74501d4cea6c4ed4ac6c9e016f98fb59cbbf\" %}\n\npackage:\n  name: cymem\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/c/cymem/cymem-{{ version }}.tar.gz\n  sha256: {{ sha256sum }}\n\nbuild:\n  number: 1\n  script: {{ PYTHON }} -m pip install --no-deps --ignore-installed .\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cython                                 # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n    - cython\n    - pip\n    - python\n    - setuptools\n    - wheel\n\n  run:\n    - python\n\ntest:\n  requires:\n    - pytest\n  imports:\n    - cymem\n  commands:\n    - python -m pytest --tb=native --pyargs cymem\n\nabout:\n  home: https://github.com/explosion/cymem\n  license: MIT\n  license_file: LICENSE\n  summary: Manage calls to calloc/free through Cython\n  description: |\n    cymem provides two small memory-management helpers for Cython. They make it\n    easy to tie memory to a Python object\u2019s life-cycle, so that the memory is\n    freed when the object is garbage collected.\n\nextra:\n  recipe-maintainers:\n    - rmax\n    - h-vetinari\n    - ines\n    - honnibal\n    - adrianeboyd\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cxx_compiler_stub",
   "cython",
   "pip",
   "python",
   "setuptools",
   "wheel"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.8.tar.gz",
 "version": "2.0.8",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/cymem.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "PYTHON -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.8"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python"
   ]
  },
  "source": {
   "sha256": "8fb09d222e21dcf1c7e907dc85cf74501d4cea6c4ed4ac6c9e016f98fb59cbbf",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem"
   ],
   "requires": [
    "pytest"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 }
}
{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  },
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  }
 },
 "feedstock_name": "r-leidenalg",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://github.com/kharchenkolab/leidenAlg",
   "license": "GPL-3.0-or-later",
   "license_file": [
    "/lib/R/share/licenses/GPL-3",
    "/lib/R/share/licenses/GPL-3"
   ],
   "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
  },
  "build": {
   "number": "0",
   "rpaths": [
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "conda-forge/r",
    "raivivek",
    "conda-forge/r",
    "raivivek"
   ]
  },
  "package": {
   "name": "r-leidenalg",
   "version": "1.1.3"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ],
   "host": [
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore"
   ],
   "run": [
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore"
   ]
  },
  "source": {
   "sha256": "3db4840c34ee9218a30e4ca6096239eb7da2b0c94ef3f3d449968f9fb3d18f3c",
   "url": [
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz"
   ]
  },
  "test": {
   "commands": [
    "$R -e \"library('leidenAlg')\"",
    "$R -e \"library('leidenAlg')\""
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-igraph",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-sccore"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-igraph",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-sccore"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://github.com/kharchenkolab/leidenAlg",
   "license": "GPL-3.0-or-later",
   "license_file": [
    "/lib/R/share/licenses/GPL-3",
    "/lib/R/share/licenses/GPL-3",
    "/lib/R/share/licenses/GPL-3",
    "/lib/R/share/licenses/GPL-3",
    "/lib/R/share/licenses/GPL-3"
   ],
   "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
  },
  "build": {
   "merge_build_host": true,
   "number": "0",
   "rpaths": [
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "conda-forge/r",
    "raivivek",
    "conda-forge/r",
    "raivivek",
    "conda-forge/r",
    "raivivek",
    "conda-forge/r",
    "raivivek",
    "conda-forge/r",
    "raivivek"
   ]
  },
  "package": {
   "name": "r-leidenalg",
   "version": "1.1.3"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "filesystem",
    "make",
    "sed",
    "coreutils",
    "zip"
   ],
   "host": [
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore"
   ],
   "run": [
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "gcc-libs",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore"
   ]
  },
  "source": {
   "sha256": "3db4840c34ee9218a30e4ca6096239eb7da2b0c94ef3f3d449968f9fb3d18f3c",
   "url": [
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz"
   ]
  },
  "test": {
   "commands": [
    "$R -e \"library('leidenAlg')\"",
    "$R -e \"library('leidenAlg')\"",
    "$R -e \"library('leidenAlg')\"",
    "$R -e \"library('leidenAlg')\"",
    "\"%R%\" -e \"library('leidenAlg')\""
   ]
  }
 },
 "name": "r-leidenalg",
 "osx_64_meta_yaml": {
  "about": {
   "home": "https://github.com/kharchenkolab/leidenAlg",
   "license": "GPL-3.0-or-later",
   "license_file": [
    "/lib/R/share/licenses/GPL-3",
    "/lib/R/share/licenses/GPL-3"
   ],
   "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
  },
  "build": {
   "number": "0",
   "rpaths": [
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "conda-forge/r",
    "raivivek",
    "conda-forge/r",
    "raivivek"
   ]
  },
  "package": {
   "name": "r-leidenalg",
   "version": "1.1.3"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ],
   "host": [
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore"
   ],
   "run": [
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore",
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore"
   ]
  },
  "source": {
   "sha256": "3db4840c34ee9218a30e4ca6096239eb7da2b0c94ef3f3d449968f9fb3d18f3c",
   "url": [
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz"
   ]
  },
  "test": {
   "commands": [
    "$R -e \"library('leidenAlg')\"",
    "$R -e \"library('leidenAlg')\""
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-igraph",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-sccore"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-igraph",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-sccore"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "r-leidenalg"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "osx_64",
  "win_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/r-leidenalg.json"
 },
 "raw_meta_yaml": "{% set version = \"1.1.3\" %}\n\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: r-leidenalg\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/leidenAlg_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/leidenAlg/leidenAlg_{{ version }}.tar.gz\n  sha256: 3db4840c34ee9218a30e4ca6096239eb7da2b0c94ef3f3d449968f9fb3d18f3c\n\nbuild:\n  merge_build_host: true  # [win]\n  number: 0\n  # This is required to make R link correctly on Linux.\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\n# Suggests: pbapply, testthat (>= 3.1.0)\nrequirements:\n  build:\n    - {{ compiler('c') }}              # [not win]\n    - {{ compiler('m2w64_c') }}        # [win]\n    - {{ compiler('cxx') }}            # [not win]\n    - {{ compiler('m2w64_cxx') }}      # [win]\n    - {{ posix }}filesystem        # [win]\n    - {{ posix }}make\n    - {{ posix }}sed               # [win]\n    - {{ posix }}coreutils         # [win]\n    - {{ posix }}zip               # [win]\n\n  host:\n    - r-base\n    - r-matrix\n    - r-matrix.utils\n    - r-rcpp >=1.0.5\n    - r-rcpparmadillo\n    - r-rcppeigen\n    - r-igraph\n    - r-sccore\n\n  run:\n    - r-base\n    - {{ native }}gcc-libs         # [win]\n    - r-matrix\n    - r-matrix.utils\n    - r-rcpp >=1.0.5\n    - r-rcpparmadillo\n    - r-rcppeigen\n    - r-igraph\n    - r-sccore\n\ntest:\n  commands:\n    - $R -e \"library('leidenAlg')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('leidenAlg')\\\"\"  # [win]\n\nabout:\n  home: https://github.com/kharchenkolab/leidenAlg\n  license: GPL-3.0-or-later\n  summary: 'An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales\n    well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to\n    Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>.'\n  license_file:\n    - {{ environ[\"PREFIX\"] }}/lib/R/share/licenses/GPL-3\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n    - raivivek\n\n# The original CRAN metadata for this package was:\n\n# Package: leidenAlg\n# Type: Package\n# Title: Implements the Leiden Algorithm via an R Interface\n# Version: 1.0.1\n# Authors@R: c(person(\"Peter\", \"Kharchenko\", email = \"Peter_Kharchenko@hms.harvard.edu\", role = c(\"aut\")), person(\"Viktor\", \"Petukhov\", email = \"viktor.s.petukhov@ya.ru\", role = c(\"aut\")), person(\"V.A.\", \"Traag\", email = \"v.a.traag@cwts.leidenuniv.nl\", role = c(\"ctb\")), person(\"Gabor\", \"Csardi\", email = \"sardi.gabor@gmail.com\", role = c(\"ctb\")), person(\"Tamas\", \"Nepusz\", email = \"ntamas@gmail.com\", role = c(\"ctb\")), person(\"Minh Van\", \"Nguyen\", email = \"nguyenminh2@gmail.com\", role = c(\"ctb\")), person(\"Evan\", \"Biederstedt\", email = \"evan.biederstedt@gmail.com\", role=c(\"cre\", \"aut\")))\n# Description: An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>.\n# License: GPL-3\n# Copyright: See the file COPYRIGHTS for various leidenAlg copyright details\n# Encoding: UTF-8\n# LazyData: true\n# Depends: R (>= 3.5.0), Matrix, igraph\n# Imports: graphics, grDevices, Matrix.utils, parallel, Rcpp (>= 1.0.5), sccore, stats\n# Suggests: pbapply, testthat (>= 3.1.0)\n# LinkingTo: Rcpp, RcppArmadillo, RcppEigen\n# SystemRequirements: GNU make\n# RoxygenNote: 7.1.2\n# URL: https://github.com/kharchenkolab/leidenAlg\n# BugReports: https://github.com/kharchenkolab/leidenAlg/issues\n# NeedsCompilation: yes\n# Author: Peter Kharchenko [aut], Viktor Petukhov [aut], V.A. Traag [ctb], Gabor Csardi [ctb], Tamas Nepusz [ctb], Minh Van Nguyen [ctb], Evan Biederstedt [cre, aut]\n# Maintainer: Evan Biederstedt <evan.biederstedt@gmail.com>\n# Packaged: 2021-12-04 03:58:11 UTC; evanbiederstedt\n# Repository: CRAN\n# Date/Publication: 2021-12-04 05:50:05 UTC\n\n# See\n# https://docs.conda.io/projects/conda-build for\n# more information about meta.yaml\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "coreutils",
   "cxx_compiler_stub",
   "filesystem",
   "gcc-libs",
   "m2w64_c_compiler_stub",
   "m2w64_cxx_compiler_stub",
   "make",
   "r-base",
   "r-igraph",
   "r-matrix",
   "r-matrix.utils",
   "r-rcpp",
   "r-rcpparmadillo",
   "r-rcppeigen",
   "r-sccore",
   "sed",
   "zip"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "coreutils",
    "cxx_compiler_stub",
    "filesystem",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "make",
    "sed",
    "zip"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "r-base",
    "r-igraph",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-sccore"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "gcc-libs",
    "r-base",
    "r-igraph",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-sccore"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "coreutils",
    "cxx_compiler_stub",
    "filesystem",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "make",
    "sed",
    "zip"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-igraph",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-sccore"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "gcc-libs",
    "r-base",
    "r-igraph",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-sccore"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": [
  "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz"
 ],
 "version": "1.1.3",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/r-leidenalg.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "home": "https://github.com/kharchenkolab/leidenAlg",
   "license": "GPL-3.0-or-later",
   "license_file": [
    "/lib/R/share/licenses/GPL-3"
   ],
   "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
  },
  "build": {
   "merge_build_host": true,
   "number": "0",
   "rpaths": [
    "lib/R/lib/",
    "lib/"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "conda-forge/r",
    "raivivek"
   ]
  },
  "package": {
   "name": "r-leidenalg",
   "version": "1.1.3"
  },
  "requirements": {
   "build": [
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "filesystem",
    "make",
    "sed",
    "coreutils",
    "zip"
   ],
   "host": [
    "r-base",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore"
   ],
   "run": [
    "r-base",
    "gcc-libs",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp >=1.0.5",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-igraph",
    "r-sccore"
   ]
  },
  "source": {
   "sha256": "3db4840c34ee9218a30e4ca6096239eb7da2b0c94ef3f3d449968f9fb3d18f3c",
   "url": [
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.3.tar.gz"
   ]
  },
  "test": {
   "commands": [
    "\"%R%\" -e \"library('leidenAlg')\""
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "coreutils",
    "filesystem",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "make",
    "sed",
    "zip"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-igraph",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-sccore"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "gcc-libs",
    "r-base",
    "r-igraph",
    "r-matrix",
    "r-matrix.utils",
    "r-rcpp",
    "r-rcpparmadillo",
    "r-rcppeigen",
    "r-sccore"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}
{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "conda_build": {
   "error_overlinking": true
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  }
 },
 "feedstock_name": "optimask",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "OptiMask: extracting the largest (non-contiguous) submatrix without NaN",
   "home": "https://github.com/CyrilJl/optimask",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "OptiMask: extracting the largest (non-contiguous) submatrix without NaN"
  },
  "build": {
   "number": "4",
   "script": [
    "PYTHON setup.py build_ext",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "CyrilJl"
   ]
  },
  "package": {
   "name": "optimask",
   "version": "1.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy",
    "pandas"
   ],
   "run": [
    "python",
    "numpy",
    "pandas"
   ]
  },
  "source": {
   "sha256": "03a44dc098ad12ae88766bb57ed0cb4b653e97c22a088eb7c0160af01730cfa7",
   "url": "https://pypi.io/packages/source/o/optimask/optimask-1.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check"
   ],
   "imports": [
    "optimask"
   ],
   "requires": [
    "pip",
    "numpy",
    "pandas"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pandas",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "OptiMask: extracting the largest (non-contiguous) submatrix without NaN",
   "home": "https://github.com/CyrilJl/optimask",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "OptiMask: extracting the largest (non-contiguous) submatrix without NaN"
  },
  "build": {
   "number": "4",
   "script": [
    "PYTHON setup.py build_ext",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "CyrilJl"
   ]
  },
  "package": {
   "name": "optimask",
   "version": "1.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy",
    "pandas"
   ],
   "run": [
    "python",
    "numpy",
    "pandas"
   ]
  },
  "source": {
   "sha256": "03a44dc098ad12ae88766bb57ed0cb4b653e97c22a088eb7c0160af01730cfa7",
   "url": "https://pypi.io/packages/source/o/optimask/optimask-1.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check"
   ],
   "imports": [
    "optimask"
   ],
   "requires": [
    "pip",
    "numpy",
    "pandas"
   ]
  }
 },
 "name": "optimask",
 "osx_64_meta_yaml": {
  "about": {
   "description": "OptiMask: extracting the largest (non-contiguous) submatrix without NaN",
   "home": "https://github.com/CyrilJl/optimask",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "OptiMask: extracting the largest (non-contiguous) submatrix without NaN"
  },
  "build": {
   "number": "4",
   "script": [
    "PYTHON setup.py build_ext",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "CyrilJl"
   ]
  },
  "package": {
   "name": "optimask",
   "version": "1.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy",
    "pandas"
   ],
   "run": [
    "python",
    "numpy",
    "pandas"
   ]
  },
  "source": {
   "sha256": "03a44dc098ad12ae88766bb57ed0cb4b653e97c22a088eb7c0160af01730cfa7",
   "url": "https://pypi.io/packages/source/o/optimask/optimask-1.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check"
   ],
   "imports": [
    "optimask"
   ],
   "requires": [
    "pip",
    "numpy",
    "pandas"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pandas",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "pip"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "optimask"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "osx_64",
  "win_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/optimask.json"
 },
 "raw_meta_yaml": "{% set name = \"optimask\" %}\n{% set version = \"1.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/optimask-{{ version }}.tar.gz\n  sha256: 03a44dc098ad12ae88766bb57ed0cb4b653e97c22a088eb7c0160af01730cfa7\n\nbuild:\n  script:\n    - {{ PYTHON }} setup.py build_ext\n    - {{ PYTHON }} -m pip install . -vv\n  number: 4\n\nrequirements:\n  build:\n    - {{ compiler(\"c\") }}\n    - {{ stdlib(\"c\") }}\n    - cross-python_{{ target_platform }}    # [build_platform != target_platform]\n    - python                                # [build_platform != target_platform]\n    - cython                                # [build_platform != target_platform]\n    - numpy                                # [build_platform != target_platform]\n    - setuptools\n  host:\n    - python\n    - pip\n    - cython\n    - numpy\n    - pandas\n  run:\n    - python\n    - {{ pin_compatible(\"numpy\") }}\n    - numpy\n    - pandas\n\ntest:\n  imports:\n    - optimask\n  commands:\n    - pip check\n  requires:\n    - pip\n    - numpy\n    - pandas\n\nabout:\n  home: https://github.com/CyrilJl/optimask\n  summary: 'OptiMask: extracting the largest (non-contiguous) submatrix without NaN'\n  description: 'OptiMask: extracting the largest (non-contiguous) submatrix without NaN'\n  license: MIT\n  license_file: LICENSE\n\nextra:\n  recipe-maintainers:\n    - CyrilJl\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "c_stdlib_stub",
   "cython",
   "numpy",
   "pandas",
   "pip",
   "python",
   "setuptools"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "cython",
    "numpy",
    "pandas",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "numpy",
    "pandas",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "pip"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pandas",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/o/optimask/optimask-1.1.tar.gz",
 "version": "1.1",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/optimask.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "description": "OptiMask: extracting the largest (non-contiguous) submatrix without NaN",
   "home": "https://github.com/CyrilJl/optimask",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "OptiMask: extracting the largest (non-contiguous) submatrix without NaN"
  },
  "build": {
   "number": "4",
   "script": [
    "PYTHON setup.py build_ext",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "CyrilJl"
   ]
  },
  "package": {
   "name": "optimask",
   "version": "1.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy",
    "pandas"
   ],
   "run": [
    "python",
    "numpy",
    "pandas"
   ]
  },
  "source": {
   "sha256": "03a44dc098ad12ae88766bb57ed0cb4b653e97c22a088eb7c0160af01730cfa7",
   "url": "https://pypi.io/packages/source/o/optimask/optimask-1.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check"
   ],
   "imports": [
    "optimask"
   ],
   "requires": [
    "pip",
    "numpy",
    "pandas"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pandas",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "pip"
   ]
  }
 }
}
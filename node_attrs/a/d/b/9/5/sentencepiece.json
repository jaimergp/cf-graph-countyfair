{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  },
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  },
  "test_on_native_only": true
 },
 "feedstock_name": "sentencepiece",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "SentencePiece is an unsupervised text tokenizer and detokenizer mainly for\nNeural Network-based text generation systems where the vocabulary size is\npredetermined prior to the neural model training.\n\nSentencePiece implements subword units (e.g., byte-pair-encoding (BPE)\n[[Sennrich et al.](http://www.aclweb.org/anthology/P16-1162)]) and unigram\nlanguage model [[Kudo](https://arxiv.org/abs/1804.109590)]) with the\nextension of direct training from raw sentences. SentencePiece allows us to\nmake a purely end-to-end system that does not depend on language-specific\npre/postprocessing.\n",
   "home": "https://github.com/google/sentencepiece/",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Unsupervised text tokenizer for Neural Network-based text generation."
  },
  "build": {
   "number": "6"
  },
  "extra": {
   "feedstock-name": "sentencepiece",
   "recipe-maintainers": [
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libabseil"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libsentencepiece.so",
      "test ! -f $PREFIX/lib/libsentencepiece.a",
      "test -f $PREFIX/lib/libsentencepiece_train.so",
      "test ! -f $PREFIX/lib/libsentencepiece_train.a",
      "test -f $PREFIX/include//sentencepiece_processor.h || (echo \"sentencepiece_processor.h not found\" && exit 1)",
      "test -f $PREFIX/include//sentencepiece_trainer.h || (echo \"sentencepiece_trainer.h not found\" && exit 1)",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.sh"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "pkg-config"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.sh",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   }
  ],
  "package": {
   "name": "sentencepiece-split",
   "version": "0.1.99"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "patches": [
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch"
   ],
   "sha256": "63617eaf56c7a3857597dcd8780461f57dd21381b56a27716ef7d7e02e14ced4",
   "url": "https://github.com/google/sentencepiece/archive/refs/tags/v0.1.99.tar.gz"
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libsentencepiece",
    "python",
    "sentencepiece-python",
    "sentencepiece-spm"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pip",
    "pkg-config",
    "pytest"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "SentencePiece is an unsupervised text tokenizer and detokenizer mainly for\nNeural Network-based text generation systems where the vocabulary size is\npredetermined prior to the neural model training.\n\nSentencePiece implements subword units (e.g., byte-pair-encoding (BPE)\n[[Sennrich et al.](http://www.aclweb.org/anthology/P16-1162)]) and unigram\nlanguage model [[Kudo](https://arxiv.org/abs/1804.109590)]) with the\nextension of direct training from raw sentences. SentencePiece allows us to\nmake a purely end-to-end system that does not depend on language-specific\npre/postprocessing.\n",
   "home": "https://github.com/google/sentencepiece/",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Unsupervised text tokenizer for Neural Network-based text generation."
  },
  "build": {
   "number": "6"
  },
  "extra": {
   "feedstock-name": "sentencepiece",
   "recipe-maintainers": [
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libabseil"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libsentencepiece.so",
      "test ! -f $PREFIX/lib/libsentencepiece.a",
      "test -f $PREFIX/lib/libsentencepiece_train.so",
      "test ! -f $PREFIX/lib/libsentencepiece_train.a",
      "test -f $PREFIX/include//sentencepiece_processor.h || (echo \"sentencepiece_processor.h not found\" && exit 1)",
      "test -f $PREFIX/include//sentencepiece_trainer.h || (echo \"sentencepiece_trainer.h not found\" && exit 1)",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.sh"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "pkg-config"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.sh",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   }
  ],
  "package": {
   "name": "sentencepiece-split",
   "version": "0.1.99"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "patches": [
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch"
   ],
   "sha256": "63617eaf56c7a3857597dcd8780461f57dd21381b56a27716ef7d7e02e14ced4",
   "url": "https://github.com/google/sentencepiece/archive/refs/tags/v0.1.99.tar.gz"
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libsentencepiece",
    "python",
    "sentencepiece-python",
    "sentencepiece-spm"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pip",
    "pkg-config",
    "pytest"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "SentencePiece is an unsupervised text tokenizer and detokenizer mainly for\nNeural Network-based text generation systems where the vocabulary size is\npredetermined prior to the neural model training.\n\nSentencePiece implements subword units (e.g., byte-pair-encoding (BPE)\n[[Sennrich et al.](http://www.aclweb.org/anthology/P16-1162)]) and unigram\nlanguage model [[Kudo](https://arxiv.org/abs/1804.109590)]) with the\nextension of direct training from raw sentences. SentencePiece allows us to\nmake a purely end-to-end system that does not depend on language-specific\npre/postprocessing.\n",
   "home": "https://github.com/google/sentencepiece/",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Unsupervised text tokenizer for Neural Network-based text generation."
  },
  "build": {
   "number": "6"
  },
  "extra": {
   "feedstock-name": "sentencepiece",
   "recipe-maintainers": [
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libabseil"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libsentencepiece.so",
      "test ! -f $PREFIX/lib/libsentencepiece.a",
      "test -f $PREFIX/lib/libsentencepiece_train.so",
      "test ! -f $PREFIX/lib/libsentencepiece_train.a",
      "test -f $PREFIX/include//sentencepiece_processor.h || (echo \"sentencepiece_processor.h not found\" && exit 1)",
      "test -f $PREFIX/include//sentencepiece_trainer.h || (echo \"sentencepiece_trainer.h not found\" && exit 1)",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.sh"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "pkg-config"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.sh",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   }
  ],
  "package": {
   "name": "sentencepiece-split",
   "version": "0.1.99"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "patches": [
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch"
   ],
   "sha256": "63617eaf56c7a3857597dcd8780461f57dd21381b56a27716ef7d7e02e14ced4",
   "url": "https://github.com/google/sentencepiece/archive/refs/tags/v0.1.99.tar.gz"
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libsentencepiece",
    "python",
    "sentencepiece-python",
    "sentencepiece-spm"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pip",
    "pkg-config",
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "SentencePiece is an unsupervised text tokenizer and detokenizer mainly for\nNeural Network-based text generation systems where the vocabulary size is\npredetermined prior to the neural model training.\n\nSentencePiece implements subword units (e.g., byte-pair-encoding (BPE)\n[[Sennrich et al.](http://www.aclweb.org/anthology/P16-1162)]) and unigram\nlanguage model [[Kudo](https://arxiv.org/abs/1804.109590)]) with the\nextension of direct training from raw sentences. SentencePiece allows us to\nmake a purely end-to-end system that does not depend on language-specific\npre/postprocessing.\n",
   "home": "https://github.com/google/sentencepiece/",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Unsupervised text tokenizer for Neural Network-based text generation."
  },
  "build": {
   "number": "6"
  },
  "extra": {
   "feedstock-name": "sentencepiece",
   "recipe-maintainers": [
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari",
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari",
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari",
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari",
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari",
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libabseil"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libsentencepiece.so",
      "test ! -f $PREFIX/lib/libsentencepiece.a",
      "test -f $PREFIX/lib/libsentencepiece_train.so",
      "test ! -f $PREFIX/lib/libsentencepiece_train.a",
      "test -f $PREFIX/include//sentencepiece_processor.h || (echo \"sentencepiece_processor.h not found\" && exit 1)",
      "test -f $PREFIX/include//sentencepiece_trainer.h || (echo \"sentencepiece_trainer.h not found\" && exit 1)",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.sh"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "pkg-config"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.sh",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libabseil"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libsentencepiece.so",
      "test ! -f $PREFIX/lib/libsentencepiece.a",
      "test -f $PREFIX/lib/libsentencepiece_train.so",
      "test ! -f $PREFIX/lib/libsentencepiece_train.a",
      "test -f $PREFIX/include//sentencepiece_processor.h || (echo \"sentencepiece_processor.h not found\" && exit 1)",
      "test -f $PREFIX/include//sentencepiece_trainer.h || (echo \"sentencepiece_trainer.h not found\" && exit 1)",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.sh"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "pkg-config"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.sh",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libabseil"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libsentencepiece.so",
      "test ! -f $PREFIX/lib/libsentencepiece.a",
      "test -f $PREFIX/lib/libsentencepiece_train.so",
      "test ! -f $PREFIX/lib/libsentencepiece_train.a",
      "test -f $PREFIX/include//sentencepiece_processor.h || (echo \"sentencepiece_processor.h not found\" && exit 1)",
      "test -f $PREFIX/include//sentencepiece_trainer.h || (echo \"sentencepiece_trainer.h not found\" && exit 1)",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.sh"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "pkg-config"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.sh",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libabseil"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libsentencepiece.dylib",
      "test ! -f $PREFIX/lib/libsentencepiece.a",
      "test -f $PREFIX/lib/libsentencepiece_train.dylib",
      "test ! -f $PREFIX/lib/libsentencepiece_train.a",
      "test -f $PREFIX/include//sentencepiece_processor.h || (echo \"sentencepiece_processor.h not found\" && exit 1)",
      "test -f $PREFIX/include//sentencepiece_trainer.h || (echo \"sentencepiece_trainer.h not found\" && exit 1)",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.sh"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "pkg-config"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.sh",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libabseil"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libsentencepiece.dylib",
      "test ! -f $PREFIX/lib/libsentencepiece.a",
      "test -f $PREFIX/lib/libsentencepiece_train.dylib",
      "test ! -f $PREFIX/lib/libsentencepiece_train.a",
      "test -f $PREFIX/include//sentencepiece_processor.h || (echo \"sentencepiece_processor.h not found\" && exit 1)",
      "test -f $PREFIX/include//sentencepiece_trainer.h || (echo \"sentencepiece_trainer.h not found\" && exit 1)",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.sh"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "pkg-config"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.sh",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf",
      "pthreads-win32"
     ],
     "run": [
      "libabseil",
      "libprotobuf"
     ]
    },
    "script": "build-lib.bat",
    "test": {
     "commands": [
      "if not exist %LIBRARY_LIB%\\sentencepiece.lib exit 1",
      "if not exist %LIBRARY_LIB%\\sentencepiece_train.lib exit 1",
      "if not exist %LIBRARY_INC%\\\\sentencepiece_processor.h exit 1",
      "if not exist %LIBRARY_INC%\\\\sentencepiece_trainer.h exit 1",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.bat"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf",
      "pthreads-win32"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.bat",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf",
      "libabseil"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.bat",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   }
  ],
  "package": {
   "name": "sentencepiece-split",
   "version": "0.1.99"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "patches": [
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch",
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch",
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch",
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch",
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch",
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch"
   ],
   "sha256": "63617eaf56c7a3857597dcd8780461f57dd21381b56a27716ef7d7e02e14ced4",
   "url": "https://github.com/google/sentencepiece/archive/refs/tags/v0.1.99.tar.gz"
  }
 },
 "name": "sentencepiece-split",
 "osx_64_meta_yaml": {
  "about": {
   "description": "SentencePiece is an unsupervised text tokenizer and detokenizer mainly for\nNeural Network-based text generation systems where the vocabulary size is\npredetermined prior to the neural model training.\n\nSentencePiece implements subword units (e.g., byte-pair-encoding (BPE)\n[[Sennrich et al.](http://www.aclweb.org/anthology/P16-1162)]) and unigram\nlanguage model [[Kudo](https://arxiv.org/abs/1804.109590)]) with the\nextension of direct training from raw sentences. SentencePiece allows us to\nmake a purely end-to-end system that does not depend on language-specific\npre/postprocessing.\n",
   "home": "https://github.com/google/sentencepiece/",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Unsupervised text tokenizer for Neural Network-based text generation."
  },
  "build": {
   "number": "6"
  },
  "extra": {
   "feedstock-name": "sentencepiece",
   "recipe-maintainers": [
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libabseil"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libsentencepiece.dylib",
      "test ! -f $PREFIX/lib/libsentencepiece.a",
      "test -f $PREFIX/lib/libsentencepiece_train.dylib",
      "test ! -f $PREFIX/lib/libsentencepiece_train.a",
      "test -f $PREFIX/include//sentencepiece_processor.h || (echo \"sentencepiece_processor.h not found\" && exit 1)",
      "test -f $PREFIX/include//sentencepiece_trainer.h || (echo \"sentencepiece_trainer.h not found\" && exit 1)",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.sh"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "pkg-config"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.sh",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   }
  ],
  "package": {
   "name": "sentencepiece-split",
   "version": "0.1.99"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "patches": [
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch"
   ],
   "sha256": "63617eaf56c7a3857597dcd8780461f57dd21381b56a27716ef7d7e02e14ced4",
   "url": "https://github.com/google/sentencepiece/archive/refs/tags/v0.1.99.tar.gz"
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libsentencepiece",
    "python",
    "sentencepiece-python",
    "sentencepiece-spm"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pip",
    "pkg-config",
    "pytest"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "SentencePiece is an unsupervised text tokenizer and detokenizer mainly for\nNeural Network-based text generation systems where the vocabulary size is\npredetermined prior to the neural model training.\n\nSentencePiece implements subword units (e.g., byte-pair-encoding (BPE)\n[[Sennrich et al.](http://www.aclweb.org/anthology/P16-1162)]) and unigram\nlanguage model [[Kudo](https://arxiv.org/abs/1804.109590)]) with the\nextension of direct training from raw sentences. SentencePiece allows us to\nmake a purely end-to-end system that does not depend on language-specific\npre/postprocessing.\n",
   "home": "https://github.com/google/sentencepiece/",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Unsupervised text tokenizer for Neural Network-based text generation."
  },
  "build": {
   "number": "6"
  },
  "extra": {
   "feedstock-name": "sentencepiece",
   "recipe-maintainers": [
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libabseil"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libsentencepiece.dylib",
      "test ! -f $PREFIX/lib/libsentencepiece.a",
      "test -f $PREFIX/lib/libsentencepiece_train.dylib",
      "test ! -f $PREFIX/lib/libsentencepiece_train.a",
      "test -f $PREFIX/include//sentencepiece_processor.h || (echo \"sentencepiece_processor.h not found\" && exit 1)",
      "test -f $PREFIX/include//sentencepiece_trainer.h || (echo \"sentencepiece_trainer.h not found\" && exit 1)",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.sh"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.sh",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "pkg-config"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.sh",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   }
  ],
  "package": {
   "name": "sentencepiece-split",
   "version": "0.1.99"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "patches": [
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch"
   ],
   "sha256": "63617eaf56c7a3857597dcd8780461f57dd21381b56a27716ef7d7e02e14ced4",
   "url": "https://github.com/google/sentencepiece/archive/refs/tags/v0.1.99.tar.gz"
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libsentencepiece",
    "python",
    "sentencepiece-python",
    "sentencepiece-spm"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pip",
    "pkg-config",
    "pytest"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libsentencepiece",
   "sentencepiece",
   "sentencepiece-python",
   "sentencepiece-spm"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "linux_aarch64",
  "linux_ppc64le",
  "osx_64",
  "osx_arm64",
  "win_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/sentencepiece.json"
 },
 "raw_meta_yaml": "{% set version = \"0.1.99\" %}\n\npackage:\n  name: sentencepiece-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/google/sentencepiece/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 63617eaf56c7a3857597dcd8780461f57dd21381b56a27716ef7d7e02e14ced4\n  patches:\n    # trying to build both static & shared build seems to break on OSX\n    - patches/0001-do-not-mix-static-shared-builds.patch\n    # unvendor abseil & protobuf-lite\n    - patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch\n    # avoid installing into $PREFIX/lib64; make sure pkg-config template is filled correctly\n    - patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch\n    # upstream sources still directly include third_party/absl...\n    - patches/0004-ACTUALLY-use-external-absl.patch\n    # upstream carries its own glue code under third_party/absl/flags;\n    # move it to the sentencepiece sources\n    - patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch\n    # ensure python bindings link to correct libs on windows\n    - patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch\n    # install pkg-config metadata also on windows\n    - patches/0007-also-install-pkg-config-files-on-windows.patch\n    # install CMake metadata\n    - patches/0008-create-and-install-CMake-metadata.patch\n\nbuild:\n  number: 6\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n\noutputs:\n  - name: sentencepiece\n    # metapackage that holds everything together\n    build:\n      run_exports:\n        # not clear what ABI-compatibility of sentencepiece versions are;\n        # for now, use same version at run & build time\n        - libsentencepiece ={{ version }}\n    requirements:\n      host:\n        - {{ pin_subpackage('libsentencepiece', exact=True) }}\n        # needs python host dep to avoid creating the same wrapper for\n        # different sentencepiece-python builds due to coinciding hashes\n        - python\n      run:\n        - {{ pin_subpackage('libsentencepiece', exact=True) }}\n        - {{ pin_subpackage('sentencepiece-spm', exact=True) }}\n        - {{ pin_subpackage('sentencepiece-python', exact=True) }}\n    test:\n      commands:\n        # tested in other outputs\n        - exit 0\n\n  - name: libsentencepiece\n    script: build-lib.sh   # [unix]\n    script: build-lib.bat  # [win]\n    build:\n      run_exports:\n        # not clear what ABI-compatibility of sentencepiece versions are;\n        # for now, use same version at run & build time\n        - libsentencepiece ={{ version }}\n    requirements:\n      build:\n        - libprotobuf     # [build_platform != target_platform]\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n      host:\n        - libabseil\n        - libprotobuf\n        - pthreads-win32  # [win]\n      run:\n        # sentencepiece uses PUBLIC linkage for abseil, which is correct\n        # (unfortunately) because it contains abseil types in its API\n        - libabseil\n        # additionally, the static windows build requires _its_\n        # host dependences to be present for successful linkage\n        - libprotobuf     # [win]\n\n    test:\n      requires:\n        # cmake needs compiler to be able to run package detection, see\n        # https://discourse.cmake.org/t/questions-about-find-package-cli-msvc/6194\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n        - pkg-config\n      source_files:\n        - data/botchan.txt\n      files:\n        - cmake_test/\n        - test_sentencepiece.sh\n        - test_sentencepiece.bat\n      commands:\n        {% for each_lib in [\"sentencepiece\", \"sentencepiece_train\"] %}\n        # presence of shared libraries\n        - test -f $PREFIX/lib/lib{{ each_lib }}.so              # [linux]\n        - test -f $PREFIX/lib/lib{{ each_lib }}.dylib           # [osx]\n\n        # static libraries on windows\n        - if not exist %LIBRARY_LIB%\\{{ each_lib }}.lib exit 1  # [win]\n\n        # absence of static libraries (on unix)\n        - test ! -f $PREFIX/lib/lib{{ each_lib }}.a             # [unix]\n        {% endfor %}\n\n        # headers\n        {% for each_header in [\"sentencepiece_processor.h\", \"sentencepiece_trainer.h\"] %}\n        - test -f $PREFIX/include//{{ each_header }} || (echo \"{{ each_header }} not found\" && exit 1)  # [unix]\n        - if not exist %LIBRARY_INC%\\\\{{ each_header }} exit 1                                          # [win]\n        {% endfor %}\n\n        # pkg-config\n        - pkg-config --print-errors --exact-version \"{{ version }}\" sentencepiece\n\n        # minimal CMake test (using find_package)\n        - ./test_sentencepiece.sh   # [unix]\n        - ./test_sentencepiece.bat  # [win]\n\n  - name: sentencepiece-spm\n    script: build-lib.sh   # [unix]\n    script: build-lib.bat  # [win]\n    requirements:\n      build:\n        - libprotobuf     # [build_platform != target_platform]\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n      host:\n        - {{ pin_subpackage('libsentencepiece', exact=True) }}\n        - libabseil\n        - libprotobuf\n        - pthreads-win32  # [win]\n      run:\n        - {{ pin_subpackage('libsentencepiece', exact=True) }}\n\n    test:\n      commands:\n        # binaries\n        {% for each_bin in [\"decode\", \"encode\", \"export_vocab\", \"normalize\", \"train\"] %}\n        - spm_{{ each_bin }} --help\n        {% endfor %}\n\n  - name: sentencepiece-python\n    script: build-pkg.sh   # [unix]\n    script: build-pkg.bat  # [win]\n    requirements:\n      build:\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - {{ compiler('cxx') }}\n        - pkg-config   # [unix]\n      host:\n        - pip\n        - python\n        - {{ pin_subpackage('libsentencepiece', exact=True) }}\n        - libprotobuf\n        # host deps of static libsentencepiece leak to consumers\n        - libabseil    # [win]\n      run:\n        - python\n        - {{ pin_subpackage('libsentencepiece', exact=True) }}\n\n    test:\n      imports:\n        - sentencepiece\n      requires:\n        - pip\n        - pytest\n      source_files:\n        - python/test\n        - data\n      commands:\n        - pip check\n        # upstream test suite expects to be run from PKG_ROOT/python\n        - cd python && pytest test\n\nabout:\n  home: \"https://github.com/google/sentencepiece/\"\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: Unsupervised text tokenizer for Neural Network-based text generation.\n  description: |\n    SentencePiece is an unsupervised text tokenizer and detokenizer mainly for\n    Neural Network-based text generation systems where the vocabulary size is\n    predetermined prior to the neural model training.\n\n    SentencePiece implements subword units (e.g., byte-pair-encoding (BPE)\n    [[Sennrich et al.](http://www.aclweb.org/anthology/P16-1162)]) and unigram\n    language model [[Kudo](https://arxiv.org/abs/1804.109590)]) with the\n    extension of direct training from raw sentences. SentencePiece allows us to\n    make a purely end-to-end system that does not depend on language-specific\n    pre/postprocessing.\n\nextra:\n  recipe-maintainers:\n    - setu4993\n    - rluria14\n    - ndmaxar\n    - oblute\n    - h-vetinari\n  feedstock-name: sentencepiece\n",
 "req": {
  "__set__": true,
  "elements": [
   "cmake",
   "cxx_compiler_stub",
   "libabseil",
   "libprotobuf",
   "libsentencepiece",
   "ninja",
   "pip",
   "pkg-config",
   "pthreads-win32",
   "python",
   "sentencepiece-python",
   "sentencepiece-spm"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "pip",
    "pthreads-win32",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "python",
    "sentencepiece-python",
    "sentencepiece-spm"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pip",
    "pkg-config",
    "pytest"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "pip",
    "pthreads-win32",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "python",
    "sentencepiece-python",
    "sentencepiece-spm"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pip",
    "pkg-config",
    "pytest"
   ]
  }
 },
 "url": "https://github.com/google/sentencepiece/archive/refs/tags/v0.1.99.tar.gz",
 "version": "0.1.99",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/sentencepiece.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "description": "SentencePiece is an unsupervised text tokenizer and detokenizer mainly for\nNeural Network-based text generation systems where the vocabulary size is\npredetermined prior to the neural model training.\n\nSentencePiece implements subword units (e.g., byte-pair-encoding (BPE)\n[[Sennrich et al.](http://www.aclweb.org/anthology/P16-1162)]) and unigram\nlanguage model [[Kudo](https://arxiv.org/abs/1804.109590)]) with the\nextension of direct training from raw sentences. SentencePiece allows us to\nmake a purely end-to-end system that does not depend on language-specific\npre/postprocessing.\n",
   "home": "https://github.com/google/sentencepiece/",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Unsupervised text tokenizer for Neural Network-based text generation."
  },
  "build": {
   "number": "6"
  },
  "extra": {
   "feedstock-name": "sentencepiece",
   "recipe-maintainers": [
    "setu4993",
    "rluria14",
    "ndmaxar",
    "oblute",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "sentencepiece",
    "requirements": {
     "host": [
      "libsentencepiece",
      "python"
     ],
     "run": [
      "libsentencepiece",
      "sentencepiece-spm",
      "sentencepiece-python"
     ]
    },
    "test": {
     "commands": [
      "exit 0"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libsentencepiece =0.1.99"
     ]
    },
    "name": "libsentencepiece",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libabseil",
      "libprotobuf",
      "pthreads-win32"
     ],
     "run": [
      "libabseil",
      "libprotobuf"
     ]
    },
    "script": "build-lib.bat",
    "test": {
     "commands": [
      "if not exist %LIBRARY_LIB%\\sentencepiece.lib exit 1",
      "if not exist %LIBRARY_LIB%\\sentencepiece_train.lib exit 1",
      "if not exist %LIBRARY_INC%\\\\sentencepiece_processor.h exit 1",
      "if not exist %LIBRARY_INC%\\\\sentencepiece_trainer.h exit 1",
      "pkg-config --print-errors --exact-version \"0.1.99\" sentencepiece",
      "./test_sentencepiece.bat"
     ],
     "files": [
      "cmake_test/",
      "test_sentencepiece.sh",
      "test_sentencepiece.bat"
     ],
     "requires": [
      "cxx_compiler_stub",
      "cmake",
      "ninja",
      "pkg-config"
     ],
     "source_files": [
      "data/botchan.txt"
     ]
    }
   },
   {
    "name": "sentencepiece-spm",
    "requirements": {
     "build": [
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "libsentencepiece",
      "libabseil",
      "libprotobuf",
      "pthreads-win32"
     ],
     "run": [
      "libsentencepiece"
     ]
    },
    "script": "build-lib.bat",
    "test": {
     "commands": [
      "spm_decode --help",
      "spm_encode --help",
      "spm_export_vocab --help",
      "spm_normalize --help",
      "spm_train --help"
     ]
    }
   },
   {
    "name": "sentencepiece-python",
    "requirements": {
     "build": [
      "cxx_compiler_stub"
     ],
     "host": [
      "pip",
      "python",
      "libsentencepiece",
      "libprotobuf",
      "libabseil"
     ],
     "run": [
      "python",
      "libsentencepiece"
     ]
    },
    "script": "build-pkg.bat",
    "test": {
     "commands": [
      "pip check",
      "cd python && pytest test"
     ],
     "imports": [
      "sentencepiece"
     ],
     "requires": [
      "pip",
      "pytest"
     ],
     "source_files": [
      "python/test",
      "data"
     ]
    }
   }
  ],
  "package": {
   "name": "sentencepiece-split",
   "version": "0.1.99"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "patches": [
    "patches/0001-do-not-mix-static-shared-builds.patch",
    "patches/0002-do-not-build-vendored-abseil-libprotobuf-lite.patch",
    "patches/0003-consistently-use-absolute-paths-for-CMAKE_INSTALL_-D.patch",
    "patches/0004-ACTUALLY-use-external-absl.patch",
    "patches/0005-stop-pretending-sp-glue-code-belongs-in-third_party-.patch",
    "patches/0006-point-to-our-libs-headers-for-windows-in-setup.py.patch",
    "patches/0007-also-install-pkg-config-files-on-windows.patch",
    "patches/0008-create-and-install-CMake-metadata.patch"
   ],
   "sha256": "63617eaf56c7a3857597dcd8780461f57dd21381b56a27716ef7d7e02e14ced4",
   "url": "https://github.com/google/sentencepiece/archive/refs/tags/v0.1.99.tar.gz"
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "pip",
    "pthreads-win32",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libabseil",
    "libprotobuf",
    "libsentencepiece",
    "python",
    "sentencepiece-python",
    "sentencepiece-spm"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja",
    "pip",
    "pkg-config",
    "pytest"
   ]
  }
 }
}
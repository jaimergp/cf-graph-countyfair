{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "conda_build": {
   "error_overlinking": true
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  },
  "provider": {
   "linux_aarch64": "default",
   "win": "azure"
  }
 },
 "feedstock_name": "cppinterop",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "CppInterOp exposes API from Clang and LLVM in a backward compatibe way.\nThe API support downstream tools that utilize interactive C++ by using\nthe compiler as a service. That is, embed Clang and LLVM as a libraries\nin their codebases. The API are designed to be minimalistic and aid\nnon-trivial tasks such as language interoperability on the fly. In such\nscenarios CppInterOp can be used to provide the necessary introspection\ninformation to the other side helping the language cross talk.\n",
   "dev_url": "https://cppinterop.readthedocs.io/en/1.3.0/DevelopersDocumentation.html",
   "doc_url": "https://cppinterop.readthedocs.io/en/1.3.0",
   "home": "https://github.com/compiler-research/CppInterOp",
   "license": "Apache-2.0 WITH LLVM-exception",
   "license_family": "Apache",
   "license_file": "cppinterop/LICENSE.txt",
   "summary": "The CppInterOp library provides a minimalist approach for other languages\nto interoperate with C++ entities.\n"
  },
  "build": {
   "error_overlinking": false,
   "ignore_run_exports": [
    "libxml2",
    "backtrace",
    "libllvm18.*"
   ],
   "number": "0",
   "string": "clang18_repl_h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "alexander-penev",
    "vgvassilev"
   ]
  },
  "package": {
   "name": "cppinterop",
   "version": "1.3.0"
  },
  "requirements": {
   "build": [
    "cmake",
    "make",
    "cxx_compiler_stub",
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "git-lfs",
    "libstdcxx-ng 12"
   ],
   "host": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "backtrace",
    "libxml2",
    "zlib",
    "zstd",
    "libstdcxx-ng 12"
   ],
   "run": [
    "libstdcxx-ng >=12"
   ],
   "run_constrained": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*"
   ]
  },
  "source": [
   {
    "folder": "cppinterop",
    "patches": null,
    "sha256": "7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec",
    "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz"
   },
   {
    "folder": "add_patches",
    "path": "patches"
   }
  ],
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libclangCppInterOp${SHLIB_EXT}",
    "mkdir -p cmake_build_test && pushd cmake_build_test",
    "$CXX -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \\/.*/p' -e '}'",
    "cmake -DCMAKE_BUILD_TYPE=Debug -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Debug -- -v",
    "./cmake_build_test $CXX",
    "rm -fr *",
    "cmake -DCMAKE_BUILD_TYPE=Release -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Release",
    "cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config RelWithDebInfo",
    "popd"
   ],
   "files": [
    "CMakeLists.txt",
    "test.cpp"
   ],
   "requires": [
    "cxx_compiler_stub",
    "libstdcxx-ng >=12",
    "cmake",
    "ninja"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "clangdev",
    "cmake",
    "cxx_compiler_stub",
    "git-lfs",
    "libstdcxx-ng",
    "llvm",
    "llvmdev",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "backtrace",
    "clangdev",
    "libstdcxx-ng",
    "libxml2",
    "llvm",
    "llvmdev",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libstdcxx-ng"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "libstdcxx-ng",
    "ninja"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "CppInterOp exposes API from Clang and LLVM in a backward compatibe way.\nThe API support downstream tools that utilize interactive C++ by using\nthe compiler as a service. That is, embed Clang and LLVM as a libraries\nin their codebases. The API are designed to be minimalistic and aid\nnon-trivial tasks such as language interoperability on the fly. In such\nscenarios CppInterOp can be used to provide the necessary introspection\ninformation to the other side helping the language cross talk.\n",
   "dev_url": "https://cppinterop.readthedocs.io/en/1.3.0/DevelopersDocumentation.html",
   "doc_url": "https://cppinterop.readthedocs.io/en/1.3.0",
   "home": "https://github.com/compiler-research/CppInterOp",
   "license": "Apache-2.0 WITH LLVM-exception",
   "license_family": "Apache",
   "license_file": "cppinterop/LICENSE.txt",
   "summary": "The CppInterOp library provides a minimalist approach for other languages\nto interoperate with C++ entities.\n"
  },
  "build": {
   "error_overlinking": false,
   "ignore_run_exports": [
    "libxml2",
    "backtrace",
    "libllvm18.*"
   ],
   "number": "0",
   "string": "clang18_repl_h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "alexander-penev",
    "vgvassilev"
   ]
  },
  "package": {
   "name": "cppinterop",
   "version": "1.3.0"
  },
  "requirements": {
   "build": [
    "cmake",
    "make",
    "cxx_compiler_stub",
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "git-lfs",
    "libstdcxx-ng 12"
   ],
   "host": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "libxml2",
    "zlib",
    "zstd",
    "libstdcxx-ng 12"
   ],
   "run": [
    "libstdcxx-ng >=12"
   ],
   "run_constrained": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*"
   ]
  },
  "source": [
   {
    "folder": "cppinterop",
    "patches": null,
    "sha256": "7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec",
    "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz"
   },
   {
    "folder": "add_patches",
    "path": "patches"
   }
  ],
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libclangCppInterOp${SHLIB_EXT}",
    "mkdir -p cmake_build_test && pushd cmake_build_test",
    "$CXX -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \\/.*/p' -e '}'",
    "cmake -DCMAKE_BUILD_TYPE=Debug -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Debug -- -v",
    "./cmake_build_test $CXX",
    "rm -fr *",
    "cmake -DCMAKE_BUILD_TYPE=Release -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Release",
    "cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config RelWithDebInfo",
    "popd"
   ],
   "files": [
    "CMakeLists.txt",
    "test.cpp"
   ],
   "requires": [
    "cxx_compiler_stub",
    "libstdcxx-ng >=12",
    "cmake",
    "ninja"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "clangdev",
    "cmake",
    "cxx_compiler_stub",
    "git-lfs",
    "libstdcxx-ng",
    "llvm",
    "llvmdev",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "clangdev",
    "libstdcxx-ng",
    "libxml2",
    "llvm",
    "llvmdev",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libstdcxx-ng"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "libstdcxx-ng",
    "ninja"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "CppInterOp exposes API from Clang and LLVM in a backward compatibe way.\nThe API support downstream tools that utilize interactive C++ by using\nthe compiler as a service. That is, embed Clang and LLVM as a libraries\nin their codebases. The API are designed to be minimalistic and aid\nnon-trivial tasks such as language interoperability on the fly. In such\nscenarios CppInterOp can be used to provide the necessary introspection\ninformation to the other side helping the language cross talk.\n",
   "dev_url": "https://cppinterop.readthedocs.io/en/1.3.0/DevelopersDocumentation.html",
   "doc_url": "https://cppinterop.readthedocs.io/en/1.3.0",
   "home": "https://github.com/compiler-research/CppInterOp",
   "license": "Apache-2.0 WITH LLVM-exception",
   "license_family": "Apache",
   "license_file": "cppinterop/LICENSE.txt",
   "summary": "The CppInterOp library provides a minimalist approach for other languages\nto interoperate with C++ entities.\n"
  },
  "build": {
   "error_overlinking": false,
   "ignore_run_exports": [
    "libxml2",
    "backtrace",
    "libllvm18.*",
    "zstd"
   ],
   "number": "0",
   "string": "clang18_repl_h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "alexander-penev",
    "vgvassilev"
   ]
  },
  "package": {
   "name": "cppinterop",
   "version": "1.3.0"
  },
  "requirements": {
   "build": [
    "cmake",
    "make",
    "cxx_compiler_stub",
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "git-lfs",
    "libstdcxx-ng 12",
    "libcxx 16",
    "ninja"
   ],
   "host": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "backtrace",
    "libxml2",
    "zlib",
    "zstd",
    "libstdcxx-ng 12",
    "libcxx 16"
   ],
   "run": [
    "libstdcxx-ng >=12",
    "libcxx 16"
   ],
   "run_constrained": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*"
   ]
  },
  "source": [
   {
    "folder": "cppinterop",
    "patches": null,
    "sha256": "7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec",
    "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz"
   },
   {
    "folder": "add_patches",
    "path": "patches"
   },
   {
    "folder": "cppinterop",
    "patches": null,
    "sha256": "7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec",
    "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz"
   },
   {
    "folder": "add_patches",
    "path": "patches"
   },
   {
    "folder": "cppinterop",
    "patches": null,
    "sha256": "7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec",
    "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz"
   },
   {
    "folder": "add_patches",
    "path": "patches"
   },
   {
    "folder": "cppinterop",
    "patches": null,
    "sha256": "7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec",
    "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz"
   },
   {
    "folder": "add_patches",
    "path": "patches"
   },
   {
    "folder": "cppinterop",
    "patches": null,
    "sha256": "7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec",
    "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz"
   },
   {
    "folder": "add_patches",
    "path": "patches"
   }
  ],
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libclangCppInterOp${SHLIB_EXT}",
    "mkdir -p cmake_build_test && pushd cmake_build_test",
    "$CXX -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \\/.*/p' -e '}'",
    "cmake -DCMAKE_BUILD_TYPE=Debug -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Debug -- -v",
    "./cmake_build_test $CXX",
    "rm -fr *",
    "cmake -DCMAKE_BUILD_TYPE=Release -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Release",
    "cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config RelWithDebInfo",
    "popd",
    "if not exist %LIBRARY_BIN%\\\\clangCppInterOp.dll exit 1"
   ],
   "files": [
    "CMakeLists.txt",
    "test.cpp"
   ],
   "requires": [
    "cxx_compiler_stub",
    "libstdcxx-ng >=12",
    "cmake",
    "ninja",
    "libcxx 16"
   ]
  }
 },
 "name": "cppinterop",
 "osx_64_meta_yaml": {
  "about": {
   "description": "CppInterOp exposes API from Clang and LLVM in a backward compatibe way.\nThe API support downstream tools that utilize interactive C++ by using\nthe compiler as a service. That is, embed Clang and LLVM as a libraries\nin their codebases. The API are designed to be minimalistic and aid\nnon-trivial tasks such as language interoperability on the fly. In such\nscenarios CppInterOp can be used to provide the necessary introspection\ninformation to the other side helping the language cross talk.\n",
   "dev_url": "https://cppinterop.readthedocs.io/en/1.3.0/DevelopersDocumentation.html",
   "doc_url": "https://cppinterop.readthedocs.io/en/1.3.0",
   "home": "https://github.com/compiler-research/CppInterOp",
   "license": "Apache-2.0 WITH LLVM-exception",
   "license_family": "Apache",
   "license_file": "cppinterop/LICENSE.txt",
   "summary": "The CppInterOp library provides a minimalist approach for other languages\nto interoperate with C++ entities.\n"
  },
  "build": {
   "error_overlinking": false,
   "ignore_run_exports": [
    "libxml2",
    "backtrace",
    "libllvm18.*"
   ],
   "number": "0",
   "string": "clang18_repl_h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "alexander-penev",
    "vgvassilev"
   ]
  },
  "package": {
   "name": "cppinterop",
   "version": "1.3.0"
  },
  "requirements": {
   "build": [
    "cmake",
    "make",
    "cxx_compiler_stub",
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "git-lfs",
    "libcxx 16"
   ],
   "host": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "backtrace",
    "libxml2",
    "zlib",
    "zstd",
    "libcxx 16"
   ],
   "run": [
    "libcxx 16"
   ],
   "run_constrained": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*"
   ]
  },
  "source": [
   {
    "folder": "cppinterop",
    "patches": null,
    "sha256": "7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec",
    "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz"
   },
   {
    "folder": "add_patches",
    "path": "patches"
   }
  ],
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libclangCppInterOp${SHLIB_EXT}",
    "mkdir -p cmake_build_test && pushd cmake_build_test",
    "$CXX -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \\/.*/p' -e '}'",
    "cmake -DCMAKE_BUILD_TYPE=Debug -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Debug -- -v",
    "./cmake_build_test $CXX",
    "rm -fr *",
    "cmake -DCMAKE_BUILD_TYPE=Release -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Release",
    "cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config RelWithDebInfo",
    "popd"
   ],
   "files": [
    "CMakeLists.txt",
    "test.cpp"
   ],
   "requires": [
    "cxx_compiler_stub",
    "libcxx 16",
    "cmake",
    "ninja"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "clangdev",
    "cmake",
    "cxx_compiler_stub",
    "git-lfs",
    "libcxx",
    "llvm",
    "llvmdev",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "backtrace",
    "clangdev",
    "libcxx",
    "libxml2",
    "llvm",
    "llvmdev",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libcxx"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "libcxx",
    "ninja"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "CppInterOp exposes API from Clang and LLVM in a backward compatibe way.\nThe API support downstream tools that utilize interactive C++ by using\nthe compiler as a service. That is, embed Clang and LLVM as a libraries\nin their codebases. The API are designed to be minimalistic and aid\nnon-trivial tasks such as language interoperability on the fly. In such\nscenarios CppInterOp can be used to provide the necessary introspection\ninformation to the other side helping the language cross talk.\n",
   "dev_url": "https://cppinterop.readthedocs.io/en/1.3.0/DevelopersDocumentation.html",
   "doc_url": "https://cppinterop.readthedocs.io/en/1.3.0",
   "home": "https://github.com/compiler-research/CppInterOp",
   "license": "Apache-2.0 WITH LLVM-exception",
   "license_family": "Apache",
   "license_file": "cppinterop/LICENSE.txt",
   "summary": "The CppInterOp library provides a minimalist approach for other languages\nto interoperate with C++ entities.\n"
  },
  "build": {
   "error_overlinking": false,
   "ignore_run_exports": [
    "libxml2",
    "backtrace",
    "libllvm18.*"
   ],
   "number": "0",
   "string": "clang18_repl_h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "alexander-penev",
    "vgvassilev"
   ]
  },
  "package": {
   "name": "cppinterop",
   "version": "1.3.0"
  },
  "requirements": {
   "build": [
    "cmake",
    "make",
    "cxx_compiler_stub",
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "git-lfs",
    "libcxx 16"
   ],
   "host": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "libxml2",
    "zlib",
    "zstd",
    "libcxx 16"
   ],
   "run": [
    "libcxx 16"
   ],
   "run_constrained": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*"
   ]
  },
  "source": [
   {
    "folder": "cppinterop",
    "patches": null,
    "sha256": "7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec",
    "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz"
   },
   {
    "folder": "add_patches",
    "path": "patches"
   }
  ],
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libclangCppInterOp${SHLIB_EXT}",
    "mkdir -p cmake_build_test && pushd cmake_build_test",
    "$CXX -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \\/.*/p' -e '}'",
    "cmake -DCMAKE_BUILD_TYPE=Debug -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Debug -- -v",
    "./cmake_build_test $CXX",
    "rm -fr *",
    "cmake -DCMAKE_BUILD_TYPE=Release -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Release",
    "cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config RelWithDebInfo",
    "popd"
   ],
   "files": [
    "CMakeLists.txt",
    "test.cpp"
   ],
   "requires": [
    "cxx_compiler_stub",
    "libcxx 16",
    "cmake",
    "ninja"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "clangdev",
    "cmake",
    "cxx_compiler_stub",
    "git-lfs",
    "libcxx",
    "llvm",
    "llvmdev",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "clangdev",
    "libcxx",
    "libxml2",
    "llvm",
    "llvmdev",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libcxx"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "libcxx",
    "ninja"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cppinterop"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "linux_aarch64",
  "osx_64",
  "osx_arm64",
  "win_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/cppinterop.json"
 },
 "raw_meta_yaml": "{% set name = \"CppInterOp\" %}\n{% set build_number = 0 %}\n{% set version = \"1.3.0\" %}\n{% set revision_tag = \"v\"+version %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  - url: https://github.com/compiler-research/CppInterOp/archive/refs/tags/{{ revision_tag }}.tar.gz\n    sha256: 7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec\n    folder: cppinterop\n    patches:\n  - path: patches\n    folder: add_patches\n\nbuild:\n  number: {{ build_number }}\n  string: clang{{ (clangdev or \"None\").split(\".\")[0] }}_repl_h{{ PKG_HASH }}_{{ build_number }}\n  error_overlinking: false # FIXME: We should adjust the ignore_run_exports.\n  ignore_run_exports:\n    - zstd  # [win]\n    - libxml2\n    - backtrace\n    - libllvm{{ clangdev }}\n\nrequirements:\n  build:\n    - cmake\n    #- clang  # [osx]\n    - make  # [unix]\n    - ninja  # [win]\n    - {{ compiler('cxx') }}\n    - llvm {{ clangdev }}\n    - llvmdev {{ clangdev }}\n    - clangdev {{ clangdev }}\n    - git-lfs\n    - libcxx {{ cxx_compiler_version }}  # [osx]\n    - libstdcxx-ng {{ cxx_compiler_version }}  # [linux]\n  host:\n    - llvm {{ clangdev }}\n    - llvmdev {{ clangdev }}\n    - clangdev {{ clangdev }}\n    - backtrace  # [unix and x86]\n    - libxml2\n    - zlib\n    - zstd  # [unix]\n    - libcxx {{ cxx_compiler_version }}  # [osx]\n    - libstdcxx-ng {{ cxx_compiler_version }}  # [linux]\n  run_constrained:\n    - llvm {{ clangdev }}\n    - llvmdev {{ clangdev }}\n    - clangdev {{ clangdev }}\n  run:\n    - libcxx {{ cxx_compiler_version }}  # [osx]\n    - libstdcxx-ng >={{ cxx_compiler_version }}  # [linux]\n\ntest:\n  requires:\n      - {{ compiler('cxx') }}\n      - libcxx {{ cxx_compiler_version }}  # [osx]\n      - libstdcxx-ng >={{ cxx_compiler_version }}  # [linux]\n      - cmake\n      - ninja\n  files:\n      - CMakeLists.txt\n      - test.cpp\n  commands:\n    - test -f $PREFIX/lib/libclangCppInterOp${SHLIB_EXT}  # [unix]\n    - if not exist %LIBRARY_BIN%\\\\clangCppInterOp.dll exit 1  # [win]\n    # Avoid Bad CPU from cmake when cross-compiling on osx and arm...\n    - exit 0  # [build_platform != target_platform]\n    - mkdir -p cmake_build_test && pushd cmake_build_test\n    - $CXX -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \\/.*/p' -e '}'  # [unix]\n    - cmake -DCMAKE_BUILD_TYPE=Debug -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..\n    - cmake --build . --config Debug -- -v\n    - ./cmake_build_test $CXX  # [unix]\n    - rm -fr *\n    - cmake -DCMAKE_BUILD_TYPE=Release -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..\n    - cmake --build . --config Release\n    - ./cmake_build_test $CXX  # [unix]\n    - rm -fr *\n    - cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..\n    - cmake --build . --config RelWithDebInfo\n    - ./cmake_build_test $CXX  # [unix]\n    - popd\n\nabout:\n  home: https://github.com/compiler-research/CppInterOp\n  license: Apache-2.0 WITH LLVM-exception\n  license_family: Apache\n  license_file: cppinterop/LICENSE.txt\n  summary: |\n    The CppInterOp library provides a minimalist approach for other languages\n    to interoperate with C++ entities.\n  description: |\n    CppInterOp exposes API from Clang and LLVM in a backward compatibe way.\n    The API support downstream tools that utilize interactive C++ by using\n    the compiler as a service. That is, embed Clang and LLVM as a libraries\n    in their codebases. The API are designed to be minimalistic and aid\n    non-trivial tasks such as language interoperability on the fly. In such\n    scenarios CppInterOp can be used to provide the necessary introspection\n    information to the other side helping the language cross talk.\n  doc_url: https://cppinterop.readthedocs.io/en/{{ version }}\n  dev_url: https://cppinterop.readthedocs.io/en/{{ version }}/DevelopersDocumentation.html\n\nextra:\n  recipe-maintainers:\n    - alexander-penev\n    - vgvassilev\n",
 "req": {
  "__set__": true,
  "elements": [
   "backtrace",
   "clangdev",
   "cmake",
   "cxx_compiler_stub",
   "git-lfs",
   "libcxx",
   "libstdcxx-ng",
   "libxml2",
   "llvm",
   "llvmdev",
   "make",
   "ninja",
   "zlib",
   "zstd"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "clangdev",
    "cmake",
    "cxx_compiler_stub",
    "git-lfs",
    "libcxx",
    "libstdcxx-ng",
    "llvm",
    "llvmdev",
    "make",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "backtrace",
    "clangdev",
    "ctng-compilers",
    "cxx_compiler_stub",
    "libcxx",
    "libstdcxx-ng",
    "libxml2",
    "llvm",
    "llvmdev",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "ctng-compilers",
    "cxx_compiler_stub",
    "libcxx",
    "libstdcxx-ng"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "libcxx",
    "libstdcxx-ng",
    "ninja"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "clangdev 18.*",
    "cmake",
    "cxx_compiler_stub",
    "git-lfs",
    "libcxx 16",
    "libstdcxx-ng 12",
    "llvm 18.*",
    "llvmdev 18.*",
    "make",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "backtrace",
    "clangdev 18.*",
    "libcxx 16",
    "libstdcxx-ng 12",
    "libxml2",
    "llvm 18.*",
    "llvmdev 18.*",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libcxx 16",
    "libstdcxx-ng >=12"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "libcxx 16",
    "libstdcxx-ng >=12",
    "ninja"
   ]
  }
 },
 "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz",
 "version": "1.3.0",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/cppinterop.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "description": "CppInterOp exposes API from Clang and LLVM in a backward compatibe way.\nThe API support downstream tools that utilize interactive C++ by using\nthe compiler as a service. That is, embed Clang and LLVM as a libraries\nin their codebases. The API are designed to be minimalistic and aid\nnon-trivial tasks such as language interoperability on the fly. In such\nscenarios CppInterOp can be used to provide the necessary introspection\ninformation to the other side helping the language cross talk.\n",
   "dev_url": "https://cppinterop.readthedocs.io/en/1.3.0/DevelopersDocumentation.html",
   "doc_url": "https://cppinterop.readthedocs.io/en/1.3.0",
   "home": "https://github.com/compiler-research/CppInterOp",
   "license": "Apache-2.0 WITH LLVM-exception",
   "license_family": "Apache",
   "license_file": "cppinterop/LICENSE.txt",
   "summary": "The CppInterOp library provides a minimalist approach for other languages\nto interoperate with C++ entities.\n"
  },
  "build": {
   "error_overlinking": false,
   "ignore_run_exports": [
    "zstd",
    "libxml2",
    "backtrace",
    "libllvm18.*"
   ],
   "number": "0",
   "string": "clang18_repl_h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "alexander-penev",
    "vgvassilev"
   ]
  },
  "package": {
   "name": "cppinterop",
   "version": "1.3.0"
  },
  "requirements": {
   "build": [
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "git-lfs"
   ],
   "host": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*",
    "libxml2",
    "zlib"
   ],
   "run": [],
   "run_constrained": [
    "llvm 18.*",
    "llvmdev 18.*",
    "clangdev 18.*"
   ]
  },
  "source": [
   {
    "folder": "cppinterop",
    "patches": null,
    "sha256": "7f9be052f5d798ad1b0c4ddc1e80038de753b22775a9b783c17b10c07facdeec",
    "url": "https://github.com/compiler-research/CppInterOp/archive/refs/tags/v1.3.0.tar.gz"
   },
   {
    "folder": "add_patches",
    "path": "patches"
   }
  ],
  "test": {
   "commands": [
    "if not exist %LIBRARY_BIN%\\\\clangCppInterOp.dll exit 1",
    "mkdir -p cmake_build_test && pushd cmake_build_test",
    "cmake -DCMAKE_BUILD_TYPE=Debug -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Debug -- -v",
    "rm -fr *",
    "cmake -DCMAKE_BUILD_TYPE=Release -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config Release",
    "cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_PREFIX=\"$BUILD_PREFIX\" -G \"Ninja\" ..",
    "cmake --build . --config RelWithDebInfo",
    "popd"
   ],
   "files": [
    "CMakeLists.txt",
    "test.cpp"
   ],
   "requires": [
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "clangdev",
    "cmake",
    "cxx_compiler_stub",
    "git-lfs",
    "llvm",
    "llvmdev",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "clangdev",
    "libxml2",
    "llvm",
    "llvmdev",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  }
 }
}
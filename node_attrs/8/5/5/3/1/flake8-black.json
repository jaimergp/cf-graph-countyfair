{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  }
 },
 "feedstock_name": "flake8-black",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Black, \"The Uncompromising Code Formatter\", is normally run to edit your\nPython code in place to match their coding style, a strict subset of the\nPEP 8 style guide. The point of this plugin is to be able to run\nblack --check ... from within the flake8 plugin ecosystem. You might use\nthis via a git pre-commit hook, or as part of your continuous integration\ntesting.\n",
   "dev_url": "https://github.com/peterjc/flake8-black",
   "home": "https://github.com/peterjc/flake8-black",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.rst",
   "summary": "Extension for flake8 for validating Python code style using black"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "PYTHON -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "peterjc"
   ]
  },
  "package": {
   "name": "flake8-black",
   "version": "0.3.6"
  },
  "requirements": {
   "host": [
    "python >=3.7",
    "pip"
   ],
   "run": [
    "python >=3.7",
    "flake8 >=3",
    "black >=22.1.0",
    "tomli"
   ]
  },
  "source": {
   "sha256": "0dfbca3274777792a5bcb2af887a4cad72c72d0e86c94e08e3a3de151bb41c34",
   "url": "https://pypi.io/packages/source/f/flake8-black/flake8-black-0.3.6.tar.gz"
  },
  "test": {
   "commands": [
    "flake8 --version | grep black:"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "black",
    "flake8",
    "python",
    "tomli"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Black, \"The Uncompromising Code Formatter\", is normally run to edit your\nPython code in place to match their coding style, a strict subset of the\nPEP 8 style guide. The point of this plugin is to be able to run\nblack --check ... from within the flake8 plugin ecosystem. You might use\nthis via a git pre-commit hook, or as part of your continuous integration\ntesting.\n",
   "dev_url": "https://github.com/peterjc/flake8-black",
   "home": "https://github.com/peterjc/flake8-black",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.rst",
   "summary": "Extension for flake8 for validating Python code style using black"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "PYTHON -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "peterjc"
   ]
  },
  "package": {
   "name": "flake8-black",
   "version": "0.3.6"
  },
  "requirements": {
   "host": [
    "python >=3.7",
    "pip"
   ],
   "run": [
    "python >=3.7",
    "flake8 >=3",
    "black >=22.1.0",
    "tomli"
   ]
  },
  "source": {
   "sha256": "0dfbca3274777792a5bcb2af887a4cad72c72d0e86c94e08e3a3de151bb41c34",
   "url": "https://pypi.io/packages/source/f/flake8-black/flake8-black-0.3.6.tar.gz"
  },
  "test": {
   "commands": [
    "flake8 --version | grep black:"
   ]
  }
 },
 "name": "flake8-black",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "flake8-black"
  ]
 },
 "parsing_error": "make_graph: 502",
 "platforms": [
  "linux_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/flake8-black.json"
 },
 "raw_meta_yaml": "{% set name = \"flake8-black\" %}\n{% set version = \"0.3.6\" %}\n{% set sha256 = \"0dfbca3274777792a5bcb2af887a4cad72c72d0e86c94e08e3a3de151bb41c34\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python >=3.7\n    - pip\n  run:\n    - python >=3.7\n    - flake8 >=3\n    - black >=22.1.0\n    # TODO - tomli not used with Python 3.11 onwards\n    - tomli\n\ntest:\n  commands:\n    - 'flake8 --version | grep black:'\n\nabout:\n  home: https://github.com/peterjc/flake8-black\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.rst\n  summary: Extension for flake8 for validating Python code style using black\n  dev_url: https://github.com/peterjc/flake8-black\n  description: |\n    Black, \"The Uncompromising Code Formatter\", is normally run to edit your\n    Python code in place to match their coding style, a strict subset of the\n    PEP 8 style guide. The point of this plugin is to be able to run\n    black --check ... from within the flake8 plugin ecosystem. You might use\n    this via a git pre-commit hook, or as part of your continuous integration\n    testing.\n\nextra:\n  recipe-maintainers:\n    - peterjc\n",
 "req": {
  "__set__": true,
  "elements": [
   "black",
   "flake8",
   "pip",
   "python",
   "tomli"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "black",
    "flake8",
    "python",
    "tomli"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.7"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "black >=22.1.0",
    "flake8 >=3",
    "python >=3.7",
    "tomli"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://pypi.io/packages/source/f/flake8-black/flake8-black-0.3.6.tar.gz",
 "version": "0.3.6",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/flake8-black.json"
 }
}